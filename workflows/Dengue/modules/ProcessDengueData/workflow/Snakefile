"""Split input data into Dengue serotypes, add serotypes to sequence name and generate
sequence specific metadata.
"""
configfile: "config/config.yaml"

indir = config["input_namespace"]
outdir = config["output_namespace"]

def script(name=""):
    from snakemake.remote import AUTO

    filename = srcdir(f"scripts/{name}")
    try:
        return AUTO.remote(filename)
    except TypeError:
        return filename

rule process_dengue_data:
    input:
        script=script("split_dengue.R"),
        metadata=f"results/{indir}/infoTbl.csv",
        fasta=f"results/{indir}/Unaligned.fasta"
    output:
        fasta = f"results/{outdir}/Unaligned_{{serotype}}.fasta",
        csv = f"results/{outdir}/Unaligned_{{serotype}}_infoTbl.csv",
        tsv = f"results/{outdir}/Unaligned_{{serotype}}_infoTbl.txt",
    params:
        output_dir = directory(f"results/{outdir}"),
    log:
        "logs/process_data_{serotype}.log"
    message:
        (
            "Split into serotype, add serotypes to sequence name and generate "
            "sequence specific metadata ({wildcards.serotype})"
        )
    conda:
        "envs/dengue.yaml"
    shell:
        """
        mkdir -p {params.output_dir}
        rscript {input.script} \
            --metadata {input.metadata} \
            --fasta {input.fasta} \
            --outfile {params.output_dir}/Unaligned_ \
            > {log} 2>&1
        """

rule _test:
    input:
        f"results/{outdir}/Unaligned_Dengue_1.fasta",
        f"results/{outdir}/Unaligned_Dengue_2.fasta",
        f"results/{outdir}/Unaligned_Dengue_3.fasta",
        f"results/{outdir}/Unaligned_Dengue_4.fasta",
